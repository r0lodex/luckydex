name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.endpoint-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install chalice

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS
        id: deploy
        run: |
          chalice deploy --stage staging
          ENDPOINT=$(chalice url --stage staging)
          echo "endpoint-url=$ENDPOINT" >> $GITHUB_OUTPUT
          echo "Deployed to: $ENDPOINT"
          echo "--------------------------------"
          ls .chalice/deployed
          echo "--------------------------------"
          ls .chalice/deployements
          echo "--------------------------------"
          if [ -f .chalice/deployed/deployed.json ]; then
            echo "::notice title=deployed.json::deployed.json generated after deployment"
            echo ""
            echo "=== .chalice/deployed.json ==="
            cat .chalice/deployed/deployed.json
            echo ""
            echo "Please commit this file to maintain deployment state."
          else
            echo "::warning::.chalice/deployed.json not found after deployment"
          fi

      - name: Upload deployed.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployed-json
          path: .chalice/deployed.json
          if-no-files-found: ignore

      - name: Update Lambda environment variables
        run: |
          FUNCTION_NAME="luckydex-staging"
          ENV_VARS=$(jq -n \
            --arg STAGE 'staging' \
            --arg GOOGLE_SHEETS_CREDENTIALS '${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}' \
            --arg GOOGLE_SPREADSHEET_ID '${{ secrets.GOOGLE_SPREADSHEET_ID }}' \
            --arg GOOGLE_SHEET_NAME '${{ vars.GOOGLE_SHEET_NAME }}' \
            '{Variables:{
              STAGE:$STAGE,
              GOOGLE_SHEETS_CREDENTIALS:$GOOGLE_SHEETS_CREDENTIALS,
              GOOGLE_SPREADSHEET_ID:$GOOGLE_SPREADSHEET_ID,
              GOOGLE_SHEET_NAME:$GOOGLE_SHEET_NAME
            }}')
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --environment "$ENV_VARS"
